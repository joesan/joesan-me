<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Navo on bigelectrons</title><link>https://bigelectrons.com/post/navo/</link><description>Recent content in Navo on bigelectrons</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright Â© 2018 - 2025 @ https://github.com/Joesan</copyright><lastBuildDate>Fri, 18 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://bigelectrons.com/post/navo/index.xml" rel="self" type="application/rss+xml"/><item><title>Arduino with L298N</title><link>https://bigelectrons.com/post/navo/arduino/arduino-with-l298n/</link><pubDate>Fri, 18 Dec 2020 00:00:00 +0000</pubDate><guid>https://bigelectrons.com/post/navo/arduino/arduino-with-l298n/</guid><description>
Arduino with L298N Let us see how we could integrate Arduino with the L298N which is our motor controller. Now, it you are unsure about why we need an L298N H bridge, here is some background information about this! With that being said, our sketch looks like this:
1/* 2* DC Motor Encoder Test Sketch 3* by Joesan [https://github.com/joesan] 4* 27.12.2020 5* 6* Records encoder ticks for each wheel 7* and prints the number of ticks for 8* each encoder every 500ms 9* 10* WARNING: This is a throw away sketch, it is here 11* just for experimental purposes.</description></item><item><title>DC Motor RPM Control</title><link>https://bigelectrons.com/post/navo/dcmotor/dc-motor-rpm-ros/</link><pubDate>Tue, 15 Dec 2020 00:00:00 +0000</pubDate><guid>https://bigelectrons.com/post/navo/dcmotor/dc-motor-rpm-ros/</guid><description>
DC Motor Speed Control with ROS We saw from the previous tutorial on how to measure the RPM of a DC Motor fitted with an encoder. In this tutorial, let us see how we could do a basic speed control using commands from a ROS node. Combined with what we learnt on how to use PID speed control algorithm let us put this all into practice. But first we need to create the circuit.</description></item><item><title>PID Controller</title><link>https://bigelectrons.com/post/navo/dcmotor/pid-controller/</link><pubDate>Mon, 14 Dec 2020 00:00:00 +0000</pubDate><guid>https://bigelectrons.com/post/navo/dcmotor/pid-controller/</guid><description>
In this section, let us explore and understand this 17th century idea on how we could effectively do a speed control for the DC Motor, the PID Controller mechanism
PID Control We will try to debunk a PID controller from a functional perspective and later on converge on the P, I and the D. The block diagram below shows the relation between a PID controller, and a process that is optimized by using a PID controller.</description></item><item><title>DC Motor with Encoder</title><link>https://bigelectrons.com/post/navo/dcmotor/dc-motor-with-encoder/</link><pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate><guid>https://bigelectrons.com/post/navo/dcmotor/dc-motor-with-encoder/</guid><description>
DC Motor A DC Motor equipped with a built-in encoder is going to immensely help us in precisely controlling the speed at which the motor rotates. Let us go through the basics behind such an encoder and how it relates to the speed ot the motor.
In this tutorial, we will look at how to do speed control using a DC Motor that has a quadrature shaft encoder. I will be using this DC Motor with Encoder as a reference.</description></item><item><title>ROS Serial on Arduino</title><link>https://bigelectrons.com/post/navo/arduino/ros-serial-arduino/</link><pubDate>Sat, 12 Dec 2020 00:00:00 +0000</pubDate><guid>https://bigelectrons.com/post/navo/arduino/ros-serial-arduino/</guid><description>
Pi with Arduino Let us see how we could set up the ROS serial communication between a Raspberry Pi and an Arduino board. So, our very first integration attempt is to integrate the Raspberry Pi with Arduino. We will use the Raspberry Pi 4. Let us break this down into the following steps:
ROS on the Raspberry Pi 4 Serial libraries on the Pi and Arduino Raspberry Pi 4 Setup It is pretty easy to get your hands on the Pi, so just go grab one and follow along.</description></item></channel></rss>